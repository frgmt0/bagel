#!/bin/sh
#
# Pre-push hook for Bagel Browser
# Runs final checks before pushing to remote
#

protected_branch='main'
current_branch=$(git rev-parse --abbrev-ref HEAD)

echo "üöÄ Running pre-push checks..."

# Prevent direct pushes to main branch
if [ "$current_branch" = "$protected_branch" ]; then
    echo "‚ùå Direct pushes to '$protected_branch' branch are not allowed!"
    echo "   Please create a feature branch and submit a pull request."
    echo ""
    echo "   To create a feature branch:"
    echo "   git checkout -b feature/your-feature-name"
    echo "   git push origin feature/your-feature-name"
    echo ""
    exit 1
fi

# Run full test suite
echo "üß™ Running full test suite..."
if ! cargo test; then
    echo "‚ùå Tests failed. Cannot push with failing tests."
    exit 1
fi

# Check for merge conflicts markers
echo "üîç Checking for merge conflict markers..."
if git diff-index --check HEAD --; then
    echo "‚úÖ No merge conflict markers found"
else
    echo "‚ùå Merge conflict markers found. Please resolve conflicts."
    exit 1
fi

# Check if we're ahead of origin
if git rev-parse --verify origin/"$current_branch" >/dev/null 2>&1; then
    commits_ahead=$(git rev-list --count origin/"$current_branch"..HEAD)
    commits_behind=$(git rev-list --count HEAD..origin/"$current_branch")
    
    if [ "$commits_behind" -gt 0 ]; then
        echo "‚ö†Ô∏è  Warning: Your branch is $commits_behind commits behind origin/$current_branch"
        echo "   Consider rebasing or merging the latest changes first"
    fi
    
    if [ "$commits_ahead" -gt 10 ]; then
        echo "‚ö†Ô∏è  Warning: You're about to push $commits_ahead commits"
        echo "   Consider breaking this into smaller pull requests"
    fi
fi

echo "‚úÖ All pre-push checks passed!"
exit 0