name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: linux-x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: windows-x64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: macos-arm64
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Prepare binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/bagel bagel-${{ matrix.suffix }}
        chmod +x bagel-${{ matrix.suffix }}
    
    - name: Prepare binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/bagel.exe bagel-${{ matrix.suffix }}
    
    - name: Generate checksum
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          certutil -hashfile bagel-${{ matrix.suffix }} SHA256 > bagel-${{ matrix.suffix }}.sha256
        else
          shasum -a 256 bagel-${{ matrix.suffix }} > bagel-${{ matrix.suffix }}.sha256
        fi
      shell: bash
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./bagel-${{ matrix.suffix }}
        asset_name: bagel-${{ matrix.suffix }}
        asset_content_type: application/octet-stream
    
    - name: Upload Checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./bagel-${{ matrix.suffix }}.sha256
        asset_name: bagel-${{ matrix.suffix }}.sha256
        asset_content_type: text/plain

  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        # Generate changelog
        if [ -n "$PREVIOUS_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)")
        fi
        
        # Set output for use in release notes
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Changes
          ${{ steps.changelog.outputs.changelog }}
          
          ## Installation
          Download the appropriate binary for your platform from the assets below.
          
          ### Verification
          Each binary includes a SHA256 checksum file for verification:
          ```bash
          # Linux/macOS
          shasum -a 256 -c bagel-*.sha256
          
          # Windows
          certutil -hashfile bagel-windows-x64.exe SHA256
          ```
        draft: false
        prerelease: false